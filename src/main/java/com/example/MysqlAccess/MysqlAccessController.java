package com.example.MysqlAccess;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class MysqlAccessController {
	@Autowired	// This means to get the bean called CustomerRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private CustomerRepository customerRepository;
	@Autowired
	private EmployeeRepository employeeRepository;
	@Autowired
	private DepartmentRepository departmentRepository;
	
	@RequestMapping("/")
    public String index() {
		// DBアクセスTop画面を表示
        return "index";
    }
	
	
	@GetMapping(path="/all")
	public String list(Model model) {
		// M_CUSTOMERテーブルの全データを取得
		Iterable<Customer> customerList = customerRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("customerlist",customerList);

		// データ一覧画面を表示
		return "list";
	}
	
	@GetMapping(path="/emall")
	public String emlist(Model model) {
		// M_EMPLOYEEテーブルの全データを取得
		Iterable<Employee> employeeList = employeeRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("employeelist",employeeList);

		// データ一覧画面を表示
		return "emlist";
	}
	
	@GetMapping(path="/deall")
	public String delist(Model model) {
		// M_DEPARTMENTテーブルの全データを取得
		Iterable<Department> departmentList = departmentRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("departmentlist",departmentList);

		// データ一覧画面を表示
		return "delist";
	}
	@RequestMapping("/insert")
    public String insert() {
		// データ登録画面を表示
        return "insert";
    }
	
	@RequestMapping("/eminsert")
    public String eminsert() {
		// データ登録画面を表示
        return "eminsert";
    }
	
	@RequestMapping("/deinsert")
    public String deinsert() {
		// データ登録画面を表示
        return "deinsert";
    }
	
	// DB登録処理
	@PostMapping(path="/register")
	public @ResponseBody String addNewCustomer(	  @RequestParam String c_num 
												, @RequestParam String c_name
												, @RequestParam String address
												, @RequestParam String tel) {
		
		Customer customerAddData = new Customer();
		customerAddData.setAll(c_num,c_name,address,tel);
		
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		customerAddData.setCreate_date(timestamp);
		customerAddData.setCreate_user("auto_system");
		customerAddData.setUpdate_date(timestamp);
		customerAddData.setUpdate_user("auto_system");
		
		customerRepository.save(customerAddData);
		
		return "登録しました";
	}
	
	@PostMapping(path="/register2")
	public @ResponseBody String addNewEmployee(	  @RequestParam String e_num 
												, @RequestParam String e_name
												, @RequestParam int e_year
												, @RequestParam String depart_cd) {
		
		Employee employeeAddData = new Employee();
		employeeAddData.setAll(e_num,e_name,e_year,depart_cd);
		
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		employeeAddData.setCreate_date(timestamp);
		employeeAddData.setCreate_user("auto_system");
		employeeAddData.setUpdate_date(timestamp);
		employeeAddData.setUpdate_user("auto_system");
		
		employeeRepository.save(employeeAddData);
		
		return "登録しました";
	}

	@PostMapping(path="/register3")
	public @ResponseBody String addNewDepartment(	  @RequestParam String d_cd 
												, @RequestParam String d_name) {
		
		Department departmentAddData = new Department();
		departmentAddData.setAll(d_cd,d_name);
		
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		departmentAddData.setCreate_date(timestamp);
		departmentAddData.setCreate_user("auto_system");
		departmentAddData.setUpdate_date(timestamp);
		departmentAddData.setUpdate_user("auto_system");
		
		departmentRepository.save(departmentAddData);
		
		return "登録しました";
	}

		
	
	
}
